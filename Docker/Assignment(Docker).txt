Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
>>>docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
>>>docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
>>>f0b8a9a54136

5. Create a container of your image
>>>docker run --name test -d nginx

6. List all the running containers
>>> docker ps

7. List all the running and stopped containers
>>> docker ps -a

8. Find out the "Full" containerId of the container and write it below.
>>> 25b311e71256

9. Find out how many image layers are used to build this image.
>>> 5
    docker image inspect <image id>

10. Get the Apache Tomcat 7 server image from the docker hub.
>>> docker pull tomcat:7.0

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
>>>docker run --name test1 -d tomcat:7.0

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
>>> 172.17.0.2
    (using inspect command)

13. Which Port it is using?
>>> 8080 (default)

14. Try to access the Tomcat's home page from your machine/vm.
>>> docker run -it --rm -p 8888:8080 tomcat:9.0

15. What is the disk size of Apache Tomcat image?
>>>533MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
>>>CATALINA_BASE
   CATALINA_HOME
   CATALINA_TMPDIR
   JRE_HOME
   CLASSPATH

17. Find out which port is exposed for tomcat?
>>> 8080(default) & 8888 (exposed by user)

18. Run multiple containers of tomcat on different port and access it's home page
>>>done

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
>>> docker pull ubuntu
    docker pull ubuntu:18.04

20. Run the container of ubuntu in attached mode.
>>> docker run --name one -it ubuntu

21. Run the container of another ubuntu in detached mode.
>>> docker run --name two -it -d ubuntu:18.04

22. Check how many ubuntu containers are running and stopped
>>> Two containers running

23. Is the tomcat container running? If no, start one.
>>> yes

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
>>> docker logs -f 8b315531072a

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
>>> docker run --name one -it ubuntu

26. Login as root user in ubuntu container
>>> done

27. Create a file with any name in root directory
>>> root@7b0009a593ac:/# touch one.txt

28. Install software of your choice in ubuntu container using "apt-get install"
>>>apt-get update

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
>>> done

30. Check if the ubuntu container is running.
>>>no

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
>>> docker run --name one-1 -it ubuntu

32. Login as a root user
>>> done

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
>>> done

34. Do you have the previous ubuntu container where you created the file and installed the software? If no repeat step 25 to 29.
>>> done

35. Create an Image out of the existing container.
>>> docker commit one
    docker tag 395ddf61f970 one-update

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
>>> docker run --name test2 -it one-update

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
>>> done

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
>>>done

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q
>>> done


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s
>>> done


41. Type below command:-
	docker --help
you will various sections of commands apart from options like "Managemnet Commands" and "Commands".
Write some texts below describing the use of "Management Commands".
>>>builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.5.1-docker)
  compose*    Docker Compose (Docker Inc., 2.0.0-beta.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes



Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp     >> Copy files/folders between a container and the local filesystem
2. create >> Create a new container
3. export >> Export a container's filesystem as a tar archive
4. history>> Show the history of an image
5. info   >> Display system-wide information
6. login  >> Log in to a Docker registry
7. logout >> Log out from a Docker registry
8. rename >> Rename a container
9. save   >> Save one or more images to a tar archive (streamed to STDOUT by default)
10. stats >> Display a live stream of container(s) resource usage statistics
11. top   >> Display the running processes of a container



42. Kill all running container in one liner command.
>>> docker kill $(docker ps -q)

43. Delete all images in one liner command.
>>> docker rmi $(docker images -q)

44. Create a simple Dockerfile, build it and run it.
>>>FROM ubuntu
   MAINTAINER rahil
   RUN apt-get update
   CMD ["echo", "hello world...."]


45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
>>>FROM ubuntu
   ENV MY_NAME="RAHIL"
   RUN mkdir -p /usr/src/app
   WORKDIR /usr/src/app
   VOLUME . /usr/src/app
   RUN apt-get install nginx
   EXPOSE 8080
   ENTRYPOINT ["echo", "hello world...."]



46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
>>> Custom image link
https://hub.docker.com/repository/docker/rahilnawab/rahilnginx
