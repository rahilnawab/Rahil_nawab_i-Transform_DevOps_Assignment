Assignments:-

List the contents of a directory and their attributes
    ls

Long list the content with file, directory ownership, permissions,sizes, etc…
    ls -l

Display the size of the file in human readable format
    ls -h

Show all files and folders including hidden one
    ls -a

list directories recursively
    ls -R

Sort the files by size with largest at the top
    ls -S

Sort the files by last time modified displaying the newest first.
    ls -t

Display the location of a program/command, where it is installed.
    pwd

Which command is used to switch directory from one to another
    cd <name>

List all the environment variables set for the current shell environment
    printenv

Did you notice something in the output of "env" command?
    is is located in bin

Which command is used to print the text or any variables value in the Console/Terminal?
    echo

Print the value of the env variable "PATH" on the console
    printenv PATH

Is linux a case-sensitive operating system?
    Yes

Is, "Ls" same as "ls"?
    no

Display your currently logged in user
    whoami

how do you change the currrently logged in user to another user?
    su -l [otheruser]


Which command is used to leave a shell environment that you are currently logged in to?
    exit

How do you reboot the system?
    sudo reboot

How do you shutdown the system?
    sudo shutdown -r

Display all the major running processes in the system
    ps -aux

Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
    The above command displays all processes running for all users on your system, along with useful information such as the username of the process′ owner, CPU loads, the starting time of the process, the command that initiated the process.

Display the name of the system kernel
    uname -s

display the kernel release number
    uname -r

display the machine type of the current kernel
    uname -m

Display the name of the operating system that the kernel is running on
    uname -o

Display all info that uname command can show.
    uname --help

Display the name of directory that you are currently pointing to
    pwd

change the current directory to another directory that you have in your system.
    cd <directory_name>

Go up one directory
    cd ..

Return to last directory
    cd -

change the current directory to home(logged in user's) directory
    cd

How to check all the command used from the prompt (Command History)
    history

In which file the history of commands are stored in?
    .bash_history

How many lines of history does the system keep and from where you can change it?
    echo $HISTSIZE

How can you modify bash's history behaviour
    HISTCONTROL varaiable

Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)
    Using "history" command we can see all the commands we have entered and by using arrow keys we can navigate through all commands with typing it.

What are the different types of shell and where are they used and how do we use them?
    bash (GNU Bourne-Again Shell)
    ksh (Korn Shell)
    sh (Bourne Shell)
    csh (C shell)
    fish

What is the difference between login shell and non-login shell?
    A login shell is the first process that executes under your user ID when you log in for an interactive session. The login process tells the shell to behave as a login shell with a convention: passing argument 0, which is normally the name of the shell executable, with a - character prepended.
    When you start a shell in a terminal in an existing session (screen, X terminal, Emacs terminal buffer, a shell inside another, etc.), you get an interactive, non-login shell. That shell might read a shell configuration file.

How do we start login shell and non-login shell?
    When you log in on a text console, or through SSH, or with su -, you get an interactive login shell and when you start a shell in a terminal in an existing session (screen, X terminal, Emacs terminal buffer, a shell inside another, etc.), you get an non-login shell.

What happens when you start a login shell (which files are read and used and Why)?
    When Bash is invoked as an login shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists. After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable.

What happens when you start a non-login shell (Which files are read and used and Why)?
    When an non-login shell is started, Bash reads and executes commands from ~/.bashrc, if that file exists. This may be inhibited by using the --norc option. The --rcfile file option will force Bash to read and execute commands from file instead of ~/.bashrc.

What are Shell Configuration Files, why do we need it?
    The Shell Configuration file contains individual specific configurations. This file is read at login and also each time a new Bash shell is started. Shell configuration files are used to execute automatically when you log in and out of a shell. They initialize and configure a shell upon login and. perform cleanup operations upon logout.

Explain the Order of file usage from the system/user's home directory when user logs in to the System.

What are Shell Variables, list major shell variables and what do they represent?
     A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly. Some of these variables are environment variables whereas others are local variables.

How we see all our env variables?
    printenv

How we see all env variables in alphabical order?
    printenv | sort

What Format does the env var and its values are stored?
    name/value pair

How do you create your own varible?
    VARIABLE_NAME= value

How do you start a new bash shell?
    By creating a file by .sh extension

Difference between Local/Shell variables to Global Variable
    The difference between global variables and regular shell variables is that a shell variable is local to a particular instance of the shell (such as a shell script), while global variables are "inherited" by any program you start, including another shell.

Making a variable accessible from other the shell in the system.
    sudo -H gedit /environment and var="value"

Show the real life use case of exporting a variable
    variable can be used wherever in the shell

Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
    Give execution rights to the file using chmod u+x file_name.sh
    Append the path of the executable script file to PATH variable in .bash_profile file
    Write a code in script file starting with shebang "#!/usr/bin/env bash" and then save it.
    Now you need to source .bash_profile once then you can run your myapp.sh as a command

What is Globbing? Explain in depth with examples?
    The Bash shell feature that is used for matching or expanding specific types of patterns is called globbing. Globbing is mainly used to match filenames or searching for content in a file. Globbing uses wildcard characters to create the pattern. The most common wildcard characters that are used for creating globbing patterns is Question mark (?)

List all entries with extension ".sh"
    egrep ".sh" file_name

List all entries with numbers in it.
    egrep "\d" file_name

List all entries that starts with a character and ends with a number
    egrep "" small.txt

List all entries that name length more than 5 characters
    egrep "[]" small.txt

What is Quoting? and Why do we need it?
    In Linux Shell, many special characters have their own special meanings. Sometimes they are used to perform an action while other times they are just used as a character, so the quoting mechanism performs this task it makes us use them in whatever way we want to. Metacharacters: These are the special characters that are first interpreted by the shell before passing the same to the command. They are also known as shell wildcards.

Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
    1. single Quoting: echo \<Welcome\>\<to\>\<geeksforgeeks\>
                      echo '<Welcome><to><geeksforgeeks>'
    2. double quoting: name=geeksforgeeks
                      echo '$name'
                      echo "$name"
    3. Back quotes: hostname=`hostname`
                   echo $hostname

How do you find a particular files/directories based on a particular search criteria?
HINT:- look for commands -> locate, find and whereis
    find = finds one or more files assuming that you know their approximate filenames. ...
    locate = find files by name. ...
    whereis = the whereis command is used to locate the binary, the source code and the online manual page for any specified program. ...

Write major difference between locate, find and whereis?
    Big difference is that find searches real files recursively down a given directory, while locate searches a database without requiring specific directory. Thus, if you have saved a file before updating database, find will find it , but locate won't. As for whereis, it search only inside those directories that are mentioned in your PATH variable and only those with executable permission set

How Globbing is different from locate, find and whereis?
    locate concept can be used with globbing, find and whereis is used for exact search purpose

Explain the Linux File System.
    Linux file system is generally a built-in layer of a Linux operating system used to handle the data management of the storage. It helps to arrange the file on the disk storage. It manages the file name, file size, creation date, and much more information about a file.

Explain absolute and Relative Paths
    An absolute path is defined as specifying the location of a file or directory from the root directory(/). In other words,we can say that an absolute path is a complete path from start of actual file system from / directory.
    Relative path is defined as the path related to the present working directly(pwd). It starts at your current directory and never starts with a / .

What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
    touch filenme.txt
    nano filename.txt

In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
    rm -r filename

Archiving files using linux command, write a command to archive set of files from linux commands.
    Tar is an Unix command which stands for Tape Archive. It is used to combine or store multiple files (same or different size) into a single file.
    example: $ tar cf file_name.tar file_name/

Extract the archived files from the above step.
    for extracting the file from above commands
    tar xf file_name.tar
